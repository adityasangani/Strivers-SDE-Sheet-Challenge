Problem link: https://leetcode.com/problems/reverse-pairs/
class Solution {
public:
    int mergesort(vector<int>&arr, int N, int low, int high){
        int count = 0;
        if(low>=high) return count;
        int mid = low + (high-low)/2;
        count+= mergesort(arr, N, low, mid);
        count+=mergesort(arr, N, mid+1, high);
        count+= countPairs(arr, N, low, mid, high);
        merge(arr, N, low, mid, high);
        return count;
    }
    void merge(vector<int>& arr, int N, int low, int mid, int high){
      vector<int> temp;
      int left = low;
      int right = mid+1;
      while(left<=mid && right<=high){
          if(arr[left]<=arr[right]){
              temp.push_back(arr[left]);
              left++;
          }
          //right is  smaller
          else{
              temp.push_back(arr[right]);
              right++;
          }
      }
      while(left<=mid){
          temp.push_back(arr[left]);
          left++;
      }
      while(right<=high){
          temp.push_back(arr[right]);
          right++;
      }
      for(int i=low; i<=high; i++){
          arr[i] = temp[i - low];
      }
  }
  int countPairs(vector<int>& arr, int N, int low, int mid, int high){
      int count =0;
      int right = mid+1;
      for(int i=low; i<=mid; i++){
          while(right<=high && 0.5 *arr[i]>arr[right]){
              right++;
          }
          count = count + (right-(mid+1));
      }
      return count;
  }
    int reversePairs(vector<int>& arr) {
        int N= arr.size();
        return mergesort(arr, N, 0, N-1);
    }
};
