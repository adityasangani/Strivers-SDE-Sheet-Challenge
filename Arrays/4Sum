Problem link: https://leetcode.com/problems/4sum/description/
//two pointer optimal approach
class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        vector<vector<int>> ans;
        sort(nums.begin(), nums.end());
        for(int i=0; i<nums.size(); i++){
            if(i>0 && nums[i]==nums[i-1]) continue;
            for(int j=i+1; j<nums.size(); j++){
                if(j>i+1 && nums[j]==nums[j-1]) continue;
                int l = j+1; 
                int k = nums.size()-1;
                while(l<k){
                    long long sum = nums[i];
                    sum+=nums[j];
                    sum+=nums[l];
                    sum+=nums[k];
                    if(sum < target){
                        int prevl = nums[l];
                        while(l<k && nums[l]==prevl) l++;
                    }
                    else if(sum> target){
                        int prevk = nums[k];
                        while(l<k && nums[k]==prevk) k--;
                    }
                    else if(sum==target){
                        ans.push_back({nums[i], nums[j], nums[l], nums[k]});
                        int prevl = nums[l];
                        while(l<k && nums[l]==prevl) l++;
                        int prevk = nums[k];
                        while(l<k && nums[k]==prevk) k--;
                    }
                }
            }
        }
        return ans;
    }
    
};
