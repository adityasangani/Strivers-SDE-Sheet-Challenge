Problem link 1: https://www.codingninjas.com/codestudio/problems/longest-subarray-with-sum-k_5713505
When zeroes and negatives are included, we will use hashmap to solve it.
#include <bits/stdc++.h> 
int getLongestSubarray(vector<int>& nums, int k){
    // Write your code here
    map<int, int> preSumMap;
    int sum = 0;
    int maxLen = 0;
    for(int i=0; i<nums.size(); i++){
        sum+=nums[i];
        if(sum==k){
            maxLen = i+1;
        }
        else{
            int rem = sum - k;
            if(preSumMap.find(rem)!=preSumMap.end()){
                maxLen = max(maxLen, i - preSumMap[rem]);
            }
        }
        if(preSumMap.find(sum)==preSumMap.end()){
            preSumMap[sum] = i;
        }
        
    }
    return maxLen;

}

If however, there are no negatives present, we can optimise it using the sliding window technique.
Problem link 2: https://www.codingninjas.com/codestudio/problems/longest-subarray-with-sum-k_6682399?leftPanelTab=1
int longestSubarrayWithSumK(vector<int> a, long long k) {
    // Write your code here
    int left =0, right = 0;
    long long sum = a[0];
    int maxLen = 0;
    int n= a.size();
    while(right<n){
        while(left<=right && sum>k){
            sum-= a[left];
            left++;
        }
        if(sum==k){
            maxLen = max(maxLen, right - left + 1);
        }
        right++;
        if(right<n) sum = sum + a[right];
    }
    
    return maxLen;
    
}
