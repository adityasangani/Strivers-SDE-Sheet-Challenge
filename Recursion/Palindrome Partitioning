Problem link: https://leetcode.com/problems/palindrome-partitioning/description/
class Solution {
public:
    vector<vector<string>> partition(string s) {
        vector<vector<string>> res;
        vector<string> path;
        solve(0, res, path, s);
        return res;
    }
    void solve(int ind, vector<vector<string>>& res, vector<string>& path, string s){
        int n = s.size();
        if(ind==n){
            res.push_back(path);
            return;
        }
        for(int i=ind; i<n; i++){
            if(isPalindrome(s, ind, i) == true){
                path.push_back(s.substr(ind, i - ind + 1));
                solve(i+1, res, path, s);
                path.pop_back();
            }
        }   
    }
    
    bool isPalindrome(string s, int start, int end){
        while(start<=end){
            if(s[start]!=s[end]) return false;
            start++;
            end--;
        }
        return true;
    }
};
