Problem link: 
//using space complexity
class Solution {
public:
    vector<vector<int>> permute(vector<int>& nums) {
        int n = nums.size();
        vector<vector<int>> ans;
        vector<int> freq(n);
        vector<int> ds;
        solve(freq, ds, nums, ans);
        return ans;
    }
    void solve(vector<int>& freq, vector<int>& ds, vector<int>& nums, vector<vector<int>>& ans){
        if(ds.size()==nums.size()){
            ans.push_back(ds);
            return;
        }
        for(int i=0; i<nums.size(); i++){
            if(freq[i]==0){
                ds.push_back(nums[i]);
                freq[i] = 1;
                solve(freq, ds, nums, ans);
                ds.pop_back();
                freq[i] = 0;
            }
        }

    }
};

//with constant space complexity
class Solution {
public:
    vector<vector<int>> permute(vector<int>& nums) {
        int n = nums.size();
        vector<vector<int>> ans;
        solve(0, nums, ans);
        return ans;
    }
    void solve(int ind, vector<int>& nums, vector<vector<int>>& ans){
        if(ind==nums.size()){
            ans.push_back(nums);
            return;
        }
        for(int i=ind; i<nums.size(); i++){
            swap(nums[ind], nums[i]);
            solve(ind+1, nums, ans);
            swap(nums[ind], nums[i]);
        }

    }
};
