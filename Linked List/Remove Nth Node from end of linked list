Problem link: https://leetcode.com/problems/remove-nth-node-from-end-of-list/description/
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        ListNode* dummy = new ListNode ();
        dummy->next = head;
        //we will take fast and slow pointers at dummy
        ListNode* slow = dummy;
        ListNode* fast = dummy;
        //next we will move fast pointer n steps
        for(int i=0; i<n; i++){
            fast = fast->next;
        }
        //next we will move slow pointer and fast pointer until fast reaches last node
        while(fast->next!=NULL){
            slow = slow->next;
            fast = fast->next;
        }
        
        slow->next = slow->next->next;
        if(slow==dummy){ //edge case
            return dummy->next;
        }
        return head;
        
    }
};
